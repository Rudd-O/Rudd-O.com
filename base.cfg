[buildout]

index = https://pypi.python.org/simple/

find-links +=
    https://dist.plone.org/release/6.0.0a3/

extends =
    https://dist.plone.org/release/6.0.0a3/versions.cfg

eggs-directory=${buildout:deployment-basedir}/buildout-cache/eggs
download-cache=${buildout:deployment-basedir}/buildout-cache/downloads
extends-cache=${buildout:deployment-basedir}/extends-cache
abi-tag-eggs = true

# Don't download new things unless needed to satisfy dependencies.
# Override this on the command line with the "-n" flag.
newest = false

# pick final releases over newer development releases
prefer-final = true

############################################
# Parts Specification
# -------------------
# Specifies the components that should be included in the buildout.
# All the basics are in the base.cfg extension; you may add your
# own if you need them at the end of this file.
parts =
    zeoserver
    test
    frontend
    zopepy
    backup
    precompile
    chown-zeo
    omelette


############################################
# Eggs
# ----
# Add an indented line to the eggs section for any Python
# eggs or packages you wish to include.
#
eggs =
    Plone
    Pillow
#   WANTED PRODUCTS versions pinned in versions.cfg
    collective.relationhelpers
    collective.prometheus
    collective.exportimport
    plone.app.mosaic
    plone.app.changeownership
    collective.searchandreplace
    onlyoffice.connector
    ruddocom.pdfiframer
    ruddocom.policy
    manuelamador.policy
    sc.social.like
#   DEVELOP-EGG VERSIONS
    ruddocom.policy [test]
    manuelamador.policy [test]
    ${buildout:debug-eggs}

# These are the eggs that will be tested.
test-eggs =
    ruddocom.policy
    manuelamador.policy

extensions =
    mr.developer

auto-checkout =
  collective.exportimport
  collective.folderishtypes
  plone.app.linkintegrity
  plone.outputfilters
  Products.CMFPlone
  plone.app.layout
  sc.social.like

always-checkout = true

############################################
# Optional Functionality
# ----------------------
# Uncomment the indented lines to include these products.
# Documentation on all of them, along with many more products,
# is available at
# http://plone.org/products/
#
# Example products:
# * LinguaPlone provides tools for building multi-lingual sites
# * PloneFormGen provides through-the-web form building
#
#    Products.LinguaPlone==4.0.1
#    Products.PloneFormGen==1.6.0
#
# Note that versions may be specified here or in the [versions]
# section below. You should always specify versions that you know
# are compatible with the Plone release and at an acceptable
# development level.
#
# Commonly used development tools:
# Several excellent development tools are included in the develop.cfg
# buildout extension. Read it to learn how to activate these tools.


############################################
# ZCML Slugs
# ----------
# Some eggs need ZCML slugs to tell Zope to
# use them. Eggs with names beginning with "Products."
# usually don't need this.
zcml =

############################################
# Development Eggs
# ----------------
# You can use paster to create "development eggs" to
# develop new products/themes. Put these in the src/
# directory.
# You will also need to add the egg names in the
# eggs section above, and may also need to add them
# to the zcml section.
#
# Provide the *paths* to the eggs you are developing here:
develop =
    src/ruddocom.policy
    src/manuelamador.policy

############################################
# Debug Mode
# ----------
# Change debug-mode to "on" to run in development mode.
# 
# Add-on developers should turn deprecation warnings on
deprecation-warnings = off
# change verbose-security to "on" for useful security errors while developing
verbose-security = off


############################################
# Backup Directory
# ----------------
# Sets the target directory for the bin/backup and bin/snapshotbackup
# commands. Default is inside this project's var directory, but ideally
# this should be on a separate volume or backup server.
# 
backups-dir=${buildout:data-dir}/backups


############################################
# Environment Variables
# ---------------------
# Some of the behavior of your Zope/Plone instances are controlled with OS
# environment variables. You may set those here in a key / value format.
# Some common settings:
#    * TZ allows you to set a time zone for systems where it's not
#      automatically available.
#    * zope_i18n_compile_mo_files allows for automatic compilation of
#      missing translation files (may slow startup).
#    * zope_i18n_allowed_languages allows you to limit the available
#      translations.
#    * PYTHON_EGG_CACHE determines where zipped python packages are unpacked
#      for use.
environment-vars =
    zope_i18n_compile_mo_files false
    PYTHON_EGG_CACHE ${buildout:directory}/.python-eggs
    PTS_LANGUAGES en es
    zope_i18n_allowed_languages en es
    #    TZ US/Eastern
    #    zope_i18n_allowed_languages en es de fr


############################################
# Versions Specification
# ----------------------
# Version information supplied here will "pin" Python packages to a particular
# version number, even when you use the "newest" flag running buildout.
# Specifying versions for all packages is a good idea and can prevent
# accidental changes when you add new packages to your buildout.
# Note that versions specified here will override those specified earlier
# in the configuration, including those from the Plone and Zope version
# config files.

[versions]
# See buildout.cfg.j2 extends for other versions being pulled.
collective.prometheus = 1.6.1
collective.recipe.backup = 4.2.0
plone.recipe.command = 1.1
collective.relationhelpers = 1.6
collective.searchandreplace = 8.2.1
onlyoffice.connector = 2.0.0
ruddocom.pdfiframer = 1.1


[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}
ignore-develop = True


[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy
scripts = zopepy


[repozo]
# This recipe builds the repozo script for non-zeo installations.
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo


[zeoserver]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeo-address}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
client-home = ${buildout:data-dir}/zeoserver
zeo-log     = ${buildout:data-dir}/zeoserver/zeoserver.log
pid-file    = ${buildout:data-dir}/zeoserver/zeoserver.pid
socket-name = ${buildout:data-dir}/zeoserver/zeo.zdsock
file-storage = ${buildout:data-dir}/var/Data.fs
blob-storage = ${buildout:data-dir}/var/blobstorage
# You may also control the environment variables for the zeoserver.
environment-vars = ${buildout:environment-vars}


[test]
recipe = zc.recipe.testrunner
eggs =
    ${buildout:eggs}
    ${buildout:test-eggs}
defaults = ['--auto-color', '--auto-progress']


[precompile]
recipe = plone.recipe.precompiler
eggs = ${buildout:eggs}
compile-mo-files = true


[chown-zeo]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command = set -ex &&
    set -o pipefail &&
    chmod 600 .installed.cfg &&
    mkdir -p `dirname ${zeoserver:zeo-log}` &&
    touch ${zeoserver:zeo-log} &&
    mkdir -p `dirname ${frontend:z2-log}` &&
    touch ${frontend:z2-log} &&
    mkdir -p `dirname ${frontend:event-log}` &&
    touch ${frontend:event-log} &&
    mkdir -p `dirname ${frontend:pid-file}` &&
    mkdir -p `dirname ${frontend:lock-file}` &&
    chmod 755 ${buildout:directory}/bin/* &&
    chown -R ${buildout:effective-user} ${buildout:data-dir} &&
    mkdir -p ${buildout:data-dir}/var &&
    mkdir -p ${buildout:data-dir}/var/cache/__pycache__ &&
    chown -R ${buildout:effective-user} ${buildout:data-dir}/var &&
    find ${buildout:data-dir} -type d -print0 | xargs -0r chmod 700 &&
    ( test -d ${buildout:deployment-dir}/var/cache || exit 0 ; find ${buildout:deployment-dir}/var/cache -type f -name "*.py" -print0 | xargs -0r rm -f ) &&
    rm -rf ${buildout:deployment-dir}/var/cache/__pycache__ &&
    ( test -d ${buildout:deployment-dir}/var/cache || exit 0 ; rmdir ${buildout:deployment-dir}/var/cache ) &&
    ( test -d ${buildout:deployment-dir}/var || exit 0 ; rmdir ${buildout:deployment-dir}/var ) &&
    chmod -R go+rX ${buildout:eggs-directory}
update-command = ${chown-zeo:command}
stop-on-error = yes


[backup]
# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
recipe = collective.recipe.backup
datafs = ${buildout:data-dir}/var/Data.fs
blob_storage = ${buildout:data-dir}/var/blobstorage
location = ${buildout:backups-dir}/filestorage
blobbackuplocation = ${buildout:backups-dir}/blobstorage
snapshotlocation = ${buildout:backups-dir}/filestorage_snapshots
blobsnapshotlocation = ${buildout:backups-dir}/blobstorage_snapshots


[frontend]
# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
# Additional clients are a
recipe = plone.recipe.zope2instance
threads = ${buildout:threads}
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
# The line below sets only the initial password. It will not change an
# existing password.
user = ${buildout:user}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
http-address = ${buildout:http-address} ${buildout:webdav-address}
max-request-body-size = 3670016000
# This line prevents the Chameleon cache from being created
# in the buildout deployment directory.
var = ${buildout:data-dir}/var
# This line prevents dumb empty directories in /opt/plone
file-storage = ${buildout:data-dir}/var/Data.fs
blob-storage = ${zeoserver:blob-storage}
shared-blob = on
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}
client-home = ${buildout:data-dir}/frontend
import-directory = ${buildout:data-dir}/import
event-log = ${buildout:data-dir}/log/event.log
z2-log    = ${buildout:data-dir}/log/Z2.log
pid-file  = ${buildout:data-dir}/run/frontend.pid
lock-file = ${buildout:data-dir}/run/frontend.lock
zodb-temporary-storage = off

# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = ${buildout:zcml}

# You may also control the environment variables for the instance.
environment-vars = ${buildout:environment-vars}

user=admin:password

zope-conf-additional =
    webdav-source-port ${buildout:webdav-source-port}
    http-realm Intranet


[sources]
# eliminate this once they have a stable release that seems worth relying on
collective.exportimport = git https://github.com/collective/collective.exportimport.git branch=main
# eliminate this once they have released #15 PR for folderishtypes
collective.folderishtypes = git https://github.com/collective/collective.folderishtypes.git branch=master
# eliminate this once they have released with next plone
plone.app.linkintegrity = git https://github.com/plone/plone.app.linkintegrity branch=master
# eliminate this once they have released with next plone
plone.outputfilters = git https://github.com/plone/plone.outputfilters branch=master
# eliminate this later
Products.CMFPlone = git https://github.com/plone/Products.CMFPlone branch=master
plone.app.layout = git https://github.com/plone/plone.app.layout branch=master
sc.social.like = git https://github.com/collective/sc.social.like branch=master
