[buildout]

extends = https://raw.githubusercontent.com/plone/plone.app.mosaic/2.2.3/versions.cfg
  
index = https://pypi.python.org/simple/

eggs-directory=${buildout:deployment-basedir}/buildout-cache/eggs
download-cache=${buildout:deployment-basedir}/buildout-cache/downloads
extends-cache=${buildout:deployment-basedir}/extends-cache

# Don't download new things unless needed to satisfy dependencies.
# Override this on the command line with the "-n" flag.
newest = false

# pick final releases over newer development releases
prefer-final = true

############################################
# Parts Specification
# -------------------
# Specifies the components that should be included in the buildout.
# All the basics are in the base.cfg extension; you may add your
# own if you need them at the end of this file.
parts =
    zeoserver
    test
    client1
    debugger
    zopepy
    backup
    zodbupdate
    precompile
    chown-zeo
    omelette


############################################
# Eggs
# ----
# Add an indented line to the eggs section for any Python
# eggs or packages you wish to include.
#
eggs =
    Plone
    Pillow
    plone.app.mosaic
#   WANTED PRODUCTS versions pinned in versions.cfg
    collective.prometheus
    collective.exportimport
    plone.app.multilingual
    plone.app.changeownership
    collective.searchandreplace
    ruddocom.policy
    ruddocom.theme
#   DEVELOP-EGG VERSIONS
    ruddocom.policy [test]
    ruddocom.theme [test]

# These are the eggs that will be tested.
test-eggs =
    ruddocom.policy
    ruddocom.theme

extensions =
    mr.developer

auto-checkout =
  zodbupdate
  collective.exportimport

always-checkout = true

############################################
# Optional Functionality
# ----------------------
# Uncomment the indented lines to include these products.
# Documentation on all of them, along with many more products,
# is available at
# http://plone.org/products/
#
# Example products:
# * LinguaPlone provides tools for building multi-lingual sites
# * PloneFormGen provides through-the-web form building
#
#    Products.LinguaPlone==4.0.1
#    Products.PloneFormGen==1.6.0
#
# Note that versions may be specified here or in the [versions]
# section below. You should always specify versions that you know
# are compatible with the Plone release and at an acceptable
# development level.
#
# Commonly used development tools:
# Several excellent development tools are included in the develop.cfg
# buildout extension. Read it to learn how to activate these tools.


############################################
# ZCML Slugs
# ----------
# Some eggs need ZCML slugs to tell Zope to
# use them. Eggs with names beginning with "Products."
# usually don't need this.
zcml =

############################################
# Development Eggs
# ----------------
# You can use paster to create "development eggs" to
# develop new products/themes. Put these in the src/
# directory.
# You will also need to add the egg names in the
# eggs section above, and may also need to add them
# to the zcml section.
#
# Provide the *paths* to the eggs you are developing here:
develop =
    src/ruddocom.policy
    src/ruddocom.theme

############################################
# Debug Mode
# ----------
# Change debug-mode to "on" to run in development mode.
# 
# Add-on developers should turn deprecation warnings on
deprecation-warnings = off
# change verbose-security to "on" for useful security errors while developing
verbose-security = off


############################################
# Backup Directory
# ----------------
# Sets the target directory for the bin/backup and bin/snapshotbackup
# commands. Default is inside this project's var directory, but ideally
# this should be on a separate volume or backup server.
# 
backups-dir=${buildout:data-dir}/backups


############################################
# Environment Variables
# ---------------------
# Some of the behavior of your Zope/Plone instances are controlled with OS
# environment variables. You may set those here in a key / value format.
# Some common settings:
#    * TZ allows you to set a time zone for systems where it's not
#      automatically available.
#    * zope_i18n_compile_mo_files allows for automatic compilation of
#      missing translation files (may slow startup).
#    * zope_i18n_allowed_languages allows you to limit the available
#      translations.
#    * PYTHON_EGG_CACHE determines where zipped python packages are unpacked
#      for use.
environment-vars =
    zope_i18n_compile_mo_files false
    PYTHON_EGG_CACHE ${buildout:directory}/.python-eggs
    PTS_LANGUAGES en es
    zope_i18n_allowed_languages en es
    #    TZ US/Eastern
    #    zope_i18n_allowed_languages en es de fr


[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}
ignore-develop = True


[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy
scripts = zopepy


[repozo]
# This recipe builds the repozo script for non-zeo installations.
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo


[zeoserver]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeo-address}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
client-home = ${buildout:data-dir}/zeoserver
zeo-log     = ${buildout:data-dir}/zeoserver/zeoserver.log
pid-file    = ${buildout:data-dir}/zeoserver/zeoserver.pid
socket-name = ${buildout:data-dir}/zeoserver/zeo.zdsock
file-storage = ${buildout:data-dir}/var/Data.fs
blob-storage = ${buildout:data-dir}/var/blobstorage
# You may also control the environment variables for the zeoserver.
environment-vars = ${buildout:environment-vars}


[test]
recipe = zc.recipe.testrunner
eggs =
    ${buildout:eggs}
    ${buildout:test-eggs}
defaults = ['--auto-color', '--auto-progress']


[chown-zeo]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =echo Dummy references to force this to execute after referenced parts
    chmod 600 .installed.cfg
    touch ${buildout:data-dir}/zeoserver/zeoserver.log
    find ${buildout:data-dir} -type d -exec chmod 700 {} \;
    chmod 755 ${buildout:directory}/bin/*
    chown -R ${buildout:effective-user} ${buildout:data-dir}
    chmod -R go+rX ${buildout:eggs-directory}


[backup]
# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
recipe = collective.recipe.backup
datafs = ${buildout:data-dir}/var/Data.fs
blob_storage = ${buildout:data-dir}/var/blobstorage
location = ${buildout:backups-dir}/filestorage
blobbackuplocation = ${buildout:backups-dir}/blobstorage
snapshotlocation = ${buildout:backups-dir}/filestorage_snapshots
blobsnapshotlocation = ${buildout:backups-dir}/blobstorage_snapshots


[client1]
# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
# Additional clients are a
recipe = plone.recipe.zope2instance
zserver-threads = ${buildout:zserver-threads}
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
# The line below sets only the initial password. It will not change an
# existing password.
user = ${buildout:user}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
http-address = ${buildout:http-address} ${buildout:webdav-address}
max-request-body-size = 3670016000
# This line prevents dumb empty directories in /opt/plone
file-storage = ${buildout:data-dir}/var/Data.fs
blob-storage = ${zeoserver:blob-storage}
shared-blob = on
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}
client-home = ${buildout:data-dir}/client1
import-directory = ${buildout:data-dir}/client1/import
event-log = ${buildout:data-dir}/client1/event.log
z2-log    = ${buildout:data-dir}/client1/Z2.log
pid-file  = ${buildout:data-dir}/client1/client1.pid
lock-file = ${buildout:data-dir}/client1/client1.lock

# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = ${buildout:zcml}

# You may also control the environment variables for the instance.
environment-vars = ${buildout:environment-vars}

user=admin:password

zope-conf-additional =
    webdav-source-port ${buildout:webdav-source-port}
    http-realm Intranet

[debugger]
<= client1
zserver-threads = 1
http-address = ${buildout:debugger-address}
debug-mode = on
verbose-security = on
client-home = ${buildout:data-dir}/debugger
import-directory = ${buildout:data-dir}/debugger/import
event-log = ${buildout:data-dir}/debugger/event.log
z2-log    = ${buildout:data-dir}/debugger/Z2.log
pid-file  = ${buildout:data-dir}/debugger/debugger.pid
lock-file = ${buildout:data-dir}/debugger/debugger.lock

#    wildcard.fixpersistentutilities no longer works with Python 2.
# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs +=
    zodbverify


[zodbupdate]
recipe = zc.recipe.egg
eggs =
    zodbupdate
    ${buildout:eggs}

# The following recipe automatically creates a Plone site
# Documentation at https://pypi.python.org/pypi/collective.recipe.plonesite
# temporarily disabling the
# [plonesite]
# recipe = collective.recipe.plonesite
# site-id = ${buildout:site-id}
# instance = debugger


[sources]
zodbupdate = git https://github.com/zopefoundation/zodbupdate.git pushurl=git@github.com:zopefoundation/zodbupdate.git branch=master
collective.exportimport = git https://github.com/collective/collective.exportimport.git pushurl=git@github.com:collective/collective.exportimport.git branch=main


[precompile]
recipe = plone.recipe.precompiler
eggs = ${buildout:eggs}
compile-mo-files = true
